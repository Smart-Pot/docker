version: "3.4"
services:

  mongodb:
    image: mongo
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--journal", "--dbpath", "/data/db", "--enableMajorityReadConcern", "false" ]
    networks: 
      - database
    volumes:
      - ./mongo/data1/db:/data/db
      - ./mongo/data1/configdb:/data/configdb
    restart: always

  mongo2:
    image: mongo
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--journal", "--dbpath", "/data/db", "--enableMajorityReadConcern", "false" ]
    networks: 
      - database
    volumes:
      - ./mongo/data2/db:/data/db 
      - ./mongo/data2/configdb:/data/configdb
    restart: always

  mongo3:
    image: mongo
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--journal", "--dbpath", "/data/db", "--enableMajorityReadConcern", "false" ]
    networks:
      - database
    volumes:
      - ./mongo/data3/db:/data/db 
      - ./mongo/data3/configdb:/data/configdb
    restart: always

  traefik:
    image: "traefik:v2.4"
    networks: 
      - traefik_net
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  
  comment-service:
    build: 
      context: ..
      dockerfile: ./Comment-Service/Dockerfile
    image: comment-service
    restart: always
    networks: 
      - traefik_net
      - database
      - rabbitmq
    depends_on: 
      - auth-service
      - mongo-config
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=docker_traefik_net"
      - "traefik.http.services.comment-service.loadbalancer.server.port=80"
      - "traefik.http.routers.comment-service.rule=Host(`35.223.107.147`) && PathPrefix(`/comment`)"
      - "traefik.http.routers.comment-service.middlewares=auth-service"
      - "traefik.http.routers.comment-service.entrypoints=web"


  post-service:
    build: 
      context: ..
      dockerfile: ./Post-Service/Dockerfile
    image: post-service
    restart: always
    networks: 
      - traefik_net
      - database
      - rabbitmq
    depends_on: 
      - auth-service
      - mongo-config
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=docker_traefik_net"
      - "traefik.http.services.post-service.loadbalancer.server.port=80"
      - "traefik.http.routers.post-service.rule=Host(`35.223.107.147`) && PathPrefix(`/post`)"
      - "traefik.http.routers.post-service.middlewares=auth-service"
      - "traefik.http.routers.post-service.entrypoints=web"


  search-service:
    build: 
      context: ..
      dockerfile: ./Search-Service/Dockerfile
    image: search-service
    restart: always
    networks: 
      - traefik_net
      - database
    depends_on: 
      - mongo-config
      - elasticsearch
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=docker_traefik_net"
      - "traefik.http.services.search-service.loadbalancer.server.port=80"
      - "traefik.http.routers.search-service.rule=Host(`35.223.107.147`) && PathPrefix(`/search`)"
      - "traefik.http.routers.search-service.middlewares=auth-service"
      - "traefik.http.routers.search-service.entrypoints=web"

  notification-service:
    build: 
      context: ..
      dockerfile: ./Notification-Service/Dockerfile
    image: notification-service
    restart: always
    networks: 
      - rabbitmq
    depends_on: 
      - rabbitmq

  auth-service:
    build: 
      context: ..
      dockerfile: ./Authentication-Service/Dockerfile
    image: auth-service
    restart: always
    networks:
      - traefik_net
      - database
      - rabbitmq
    depends_on:
      - mongo-config
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=docker_traefik_net"
      - "traefik.http.middlewares.auth-service.forwardauth.address=http://auth-service:80/auth/"
      - "traefik.http.middlewares.auth-service.forwardauth.authResponseHeaders=x-user-id"
      - "traefik.http.middlewares.auth-service.forwardauth.authRequestHeaders=x-auth-token"
      - "traefik.http.middlewares.auth-service.forwardauth.trustForwardHeader=true"
      - "traefik.http.services.auth-service.loadbalancer.server.port=80"
      - "traefik.http.routers.auth-service.rule=Host(`35.223.107.147`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.auth-service.entrypoints=web"

  user-service:
    build: 
      context: ..
      dockerfile: ./User-Service/Dockerfile
    image: user-service
    restart: always
    networks: 
      - rabbitmq
      - traefik_net
      - database
    depends_on: 
      - auth-service
      - rabbitmq
      - mongo-config
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=docker_traefik_net"
      - "traefik.http.services.user-service.loadbalancer.server.port=80"
      - "traefik.http.routers.user-service.rule=Host(`35.223.107.147`) && PathPrefix(`/user`)"
      - "traefik.http.routers.user-service.middlewares=auth-service"
      - "traefik.http.routers.user-service.entrypoints=web"

  Upload-service:
    build: 
      context: ..
      dockerfile: ./Upload-Service/Dockerfile
    image: upload-service
    restart: always
    networks: 
      - traefik_net
    depends_on: 
      - auth-service
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=docker_traefik_net"
      - "traefik.http.services.user-service.loadbalancer.server.port=80"
      - "traefik.http.routers.user-service.rule=Host(`35.223.107.147`) && PathPrefix(`/upload`)"
      - "traefik.http.routers.user-service.middlewares=auth-service"
      - "traefik.http.routers.user-service.entrypoints=web"



  mongo-config:
    image: mongo
    depends_on:
      - mongodb
      - mongo2
      - mongo3
    networks:
      - database
    volumes:
      - ./scripts:/scripts
    environment: 
      - SLEEP_TIME=30
    entrypoint: ['/scripts/setup.sh']
  
  elasticsearch:
    image: elasticsearch:7.10.1
    networks:
      - database
    ports: 
      - 9200:9200
    environment: 
      - discovery.type=single-node
    volumes:
      - ./elasticsearch/logging.yml:/etc/elasticsearch/logging.yml
    depends_on:
      - mongo-config
    restart: always
  
  elastic-config:
    image: python
    depends_on:
      - elasticsearch
    networks:
      - database
    volumes:
      - ./scripts:/scripts
    environment: 
      - SLEEP_TIME=60
    entrypoint: ['/scripts/elastic-setup.sh']
    
  mongo-connector:
    image: python
    networks:
      - database
    depends_on:
      - elasticsearch
      - mongodb
    volumes:
      - ./mongo-connector:/var/
    environment: 
      - SLEEP_TIME=60
    entrypoint: ["var/scripts/mongo-connector.sh"]
    

  rabbitmq:
    image: rabbitmq
    networks: 
    - rabbitmq
      
networks:
  traefik_net:
    driver: bridge
  database:
    driver: bridge
  rabbitmq:
    driver: bridge
